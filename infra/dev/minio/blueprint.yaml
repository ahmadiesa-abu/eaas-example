tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/6.2.0/types.yaml
  - plugin:cloudify-fabric-plugin?version= >=2.0.7

inputs:
  cloud_credentials:
    type: dict
  resource_config:
    type: resource_config
  network_deployment_id:
    type: string
  resource_prefix:
    type: string
    default: ''

data_types:
  resource_config:
    properties:
      bucket_name:
        type: string
      access_key_id:
        type: string
      secret_access_key:
        type: string
   
node_types:
  types.minio.Server:
    derived_from: cloudify.nodes.Root
    properties:
      access_key_id:
        type: string
        default: { get_input: [ resource_config, access_key_id ] }
      secret_access_key:
        type: string
        default: { get_input: [ resource_config, secret_access_key ] }
      data_dir:
        type: string
        default: /var/minio/data
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: scripts/install-minio-server.sh
            fabric_env:
              default: &fabric_env
                host: { get_attribute: [ network, capabilities, s3_vm_ip ] }
                user: centos
                connect_kwargs:
                  pkey: { get_input: [ cloud_credentials, private_key_content ] }
        configure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: scripts/configure-minio-server.sh
            fabric_env:
              default: *fabric_env
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: scripts/start-minio-server.sh
            fabric_env:
              default: *fabric_env

  types.minio.Client:
    derived_from: cloudify.nodes.Root
    properties:
      access_key_id:
        type: string
        default: { get_input: [ resource_config, access_key_id ] }
      secret_access_key:
        type: string
        default: { get_input: [ resource_config, secret_access_key ] }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: scripts/install-minio-client.sh
            fabric_env:
              default: *fabric_env
        configure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: scripts/configure-minio-client.sh
            fabric_env:
              default: *fabric_env

  types.minio.Bucket:
    derived_from: cloudify.nodes.Root
    properties:
      bucket_name:
        type: string
      bucket_region:
        type: string
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path:
              default: scripts/create-bucket.sh
            fabric_env:
              default: *fabric_env

node_templates:
  network:
    type: cloudify.nodes.SharedResource
    properties:
      resource_config:
        deployment:
          id: { get_input: network_deployment_id }

  minio-server:
    type: types.minio.Server
    relationships:
      - target: network
        type: cloudify.relationships.depends_on

  minio-client:
    type: types.minio.Client
    relationships:
      - target: minio-server
        type: cloudify.relationships.depends_on

  minio-bucket:
    type: types.minio.Bucket
    properties:
      bucket_name: { get_input: [ resource_config, bucket_name ] }
      bucket_region: { get_input: [ cloud_credentials, region_name ] }
    relationships:
      - target: minio-server
        type: cloudify.relationships.contained_in
      - target: minio-client
        type: cloudify.relationships.depends_on

capabilities:
  bucket_url:
    value: { concat: [ 'http://', { get_attribute: [ network, capabilities, s3_vm_ip ] }, ':9000/', { get_input: [ resource_config, bucket_name ] } ] }
